// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: favourite.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
}

func (x *FavRequest) Reset() {
	*x = FavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favourite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavRequest) ProtoMessage() {}

func (x *FavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favourite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavRequest.ProtoReflect.Descriptor instead.
func (*FavRequest) Descriptor() ([]byte, []int) {
	return file_favourite_proto_rawDescGZIP(), []int{0}
}

func (x *FavRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavRequest) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type FavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
}

func (x *FavResponse) Reset() {
	*x = FavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favourite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavResponse) ProtoMessage() {}

func (x *FavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favourite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavResponse.ProtoReflect.Descriptor instead.
func (*FavResponse) Descriptor() ([]byte, []int) {
	return file_favourite_proto_rawDescGZIP(), []int{1}
}

func (x *FavResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavResponse) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type FavListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*FavResponse `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FavListResponse) Reset() {
	*x = FavListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favourite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavListResponse) ProtoMessage() {}

func (x *FavListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favourite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavListResponse.ProtoReflect.Descriptor instead.
func (*FavListResponse) Descriptor() ([]byte, []int) {
	return file_favourite_proto_rawDescGZIP(), []int{2}
}

func (x *FavListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FavListResponse) GetData() []*FavResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_favourite_proto protoreflect.FileDescriptor

var file_favourite_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e,
	0x0a, 0x0a, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0x3f,
	0x0a, 0x0b, 0x46, 0x61, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22,
	0x49, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x61, 0x76, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xce, 0x01, 0x0a, 0x09, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x12,
	0x0b, 0x2e, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61,
	0x76, 0x12, 0x0b, 0x2e, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0b, 0x2e, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favourite_proto_rawDescOnce sync.Once
	file_favourite_proto_rawDescData = file_favourite_proto_rawDesc
)

func file_favourite_proto_rawDescGZIP() []byte {
	file_favourite_proto_rawDescOnce.Do(func() {
		file_favourite_proto_rawDescData = protoimpl.X.CompressGZIP(file_favourite_proto_rawDescData)
	})
	return file_favourite_proto_rawDescData
}

var file_favourite_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_favourite_proto_goTypes = []interface{}{
	(*FavRequest)(nil),      // 0: FavRequest
	(*FavResponse)(nil),     // 1: FavResponse
	(*FavListResponse)(nil), // 2: FavListResponse
	(*emptypb.Empty)(nil),   // 3: google.protobuf.Empty
}
var file_favourite_proto_depIdxs = []int32{
	1, // 0: FavListResponse.data:type_name -> FavResponse
	0, // 1: Favourite.GetFavList:input_type -> FavRequest
	0, // 2: Favourite.AddFav:input_type -> FavRequest
	0, // 3: Favourite.DeleteFav:input_type -> FavRequest
	0, // 4: Favourite.GetFavDetail:input_type -> FavRequest
	2, // 5: Favourite.GetFavList:output_type -> FavListResponse
	3, // 6: Favourite.AddFav:output_type -> google.protobuf.Empty
	3, // 7: Favourite.DeleteFav:output_type -> google.protobuf.Empty
	3, // 8: Favourite.GetFavDetail:output_type -> google.protobuf.Empty
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_favourite_proto_init() }
func file_favourite_proto_init() {
	if File_favourite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favourite_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favourite_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favourite_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favourite_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favourite_proto_goTypes,
		DependencyIndexes: file_favourite_proto_depIdxs,
		MessageInfos:      file_favourite_proto_msgTypes,
	}.Build()
	File_favourite_proto = out.File
	file_favourite_proto_rawDesc = nil
	file_favourite_proto_goTypes = nil
	file_favourite_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FavouriteClient is the client API for Favourite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FavouriteClient interface {
	GetFavList(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*FavListResponse, error)
	AddFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavDetail(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type favouriteClient struct {
	cc grpc.ClientConnInterface
}

func NewFavouriteClient(cc grpc.ClientConnInterface) FavouriteClient {
	return &favouriteClient{cc}
}

func (c *favouriteClient) GetFavList(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*FavListResponse, error) {
	out := new(FavListResponse)
	err := c.cc.Invoke(ctx, "/Favourite/GetFavList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouriteClient) AddFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Favourite/AddFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouriteClient) DeleteFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Favourite/DeleteFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouriteClient) GetFavDetail(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Favourite/GetFavDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavouriteServer is the server API for Favourite service.
type FavouriteServer interface {
	GetFavList(context.Context, *FavRequest) (*FavListResponse, error)
	AddFav(context.Context, *FavRequest) (*emptypb.Empty, error)
	DeleteFav(context.Context, *FavRequest) (*emptypb.Empty, error)
	GetFavDetail(context.Context, *FavRequest) (*emptypb.Empty, error)
}

// UnimplementedFavouriteServer can be embedded to have forward compatible implementations.
type UnimplementedFavouriteServer struct {
}

func (*UnimplementedFavouriteServer) GetFavList(context.Context, *FavRequest) (*FavListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavList not implemented")
}
func (*UnimplementedFavouriteServer) AddFav(context.Context, *FavRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFav not implemented")
}
func (*UnimplementedFavouriteServer) DeleteFav(context.Context, *FavRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFav not implemented")
}
func (*UnimplementedFavouriteServer) GetFavDetail(context.Context, *FavRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavDetail not implemented")
}

func RegisterFavouriteServer(s *grpc.Server, srv FavouriteServer) {
	s.RegisterService(&_Favourite_serviceDesc, srv)
}

func _Favourite_GetFavList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouriteServer).GetFavList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Favourite/GetFavList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouriteServer).GetFavList(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favourite_AddFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouriteServer).AddFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Favourite/AddFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouriteServer).AddFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favourite_DeleteFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouriteServer).DeleteFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Favourite/DeleteFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouriteServer).DeleteFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favourite_GetFavDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouriteServer).GetFavDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Favourite/GetFavDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouriteServer).GetFavDetail(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Favourite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Favourite",
	HandlerType: (*FavouriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFavList",
			Handler:    _Favourite_GetFavList_Handler,
		},
		{
			MethodName: "AddFav",
			Handler:    _Favourite_AddFav_Handler,
		},
		{
			MethodName: "DeleteFav",
			Handler:    _Favourite_DeleteFav_Handler,
		},
		{
			MethodName: "GetFavDetail",
			Handler:    _Favourite_GetFavDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favourite.proto",
}
